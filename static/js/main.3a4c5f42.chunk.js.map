{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","facebookToken","pageName","status","responseList","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","defineProperty","target","name","value","_this2","preventDefault","alert","FBToken","url","concat","fetch","then","res","console","log","ok","json","jsonResult","localResponseList","data","error","list","listItems","map","item","react_default","a","createElement","key","id","message","className","onSubmit","style","alignItems","type","width","height","marginLeft","onChange","fontSize","color","margin","renderList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a4c5f42.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      facebookToken: '104209816294440|xVZhfKIU2_TsCnsimmUoaM0YU68',\n      pageName: 'reactiveboards',\n      status: 'waiting',\n      responseList: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    if (this.state.pageName === '') {\n      alert('Please provide a facebook page name!');\n    } else {\n      const pageName = this.state.pageName;\n      const FBToken = this.state.facebookToken;\n\n      this.setState({\n        status: 'getting posts from page'\n      })\n      //get page posts\n      const url = `https://graph.facebook.com/v2.9/${pageName}/posts?access_token=${FBToken}`;\n\n      fetch(url)\n        .then((res) => {\n          console.log('result: ', res);\n          if (res.ok === false && res.status === 404) {\n            this.setState({ status: 'wrong facebook page name' })\n          } else {\n            return res.json()\n          }\n        })\n        .then((jsonResult) => {\n          const localResponseList = jsonResult.data;\n\n          console.log('json result: ', localResponseList);\n          this.setState({\n            responseList: localResponseList,\n            status: 'waiting'\n          })\n        },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n            console.log('error: ', error);\n          }\n        )\n    }\n  }\n\n  renderList(list) {\n    const listItems = list.map((item) =>\n      <li key={item.id}>{item.message}</li>\n    );\n\n    return (\n      <ul> {listItems} </ul>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <form\n            onSubmit={this.handleSubmit}\n            style={{\n              alignItems: 'flex-start'\n            }}\n          >\n            <label >\n              Facebook Token:\n              <input\n                type=\"text\"\n                name=\"facebookToken\"\n                style={{\n                  width: 290,\n                  height: 12,\n                  marginLeft: '16px',\n                }}\n                value={this.state.facebookToken}\n                onChange={this.handleChange}\n              />\n            </label>\n            <br />\n            <label\n              style={{\n                fontSize: 10,\n                color: 'gray'\n              }}\n            >\n              Don't change this unless you know what you are doing!\n            </label>\n            <br />\n            <br />\n            <label>\n              Facebook Page Name (or ID):\n              <input\n                type=\"text\"\n                name=\"pageName\"\n                style={{\n                  width: 200,\n                  height: 16,\n                  margin: '16px',\n                }}\n                value={this.state.pageName}\n                onChange={this.handleChange}\n              />\n            </label>\n            <input type=\"submit\" value=\"Import\" style={{\n              height: 16\n            }}\n            />\n          </form>\n          <label> Status: {this.state.status}</label>\n          <br />\n          <label> Result: {this.renderList(this.state.responseList)}</label>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}